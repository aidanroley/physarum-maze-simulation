
#pragma kernel CSMain

RWTexture2D<float4> Result;
RWTexture2D<float4> TrailMap : register(u2);

Texture2D<float4> ReadTexture : register(t0); 
SamplerState sampler0 : register(s0);

uniform int randomValues;
int width;
int height;
float deltaTime;
float time;
int numAgents = 100000;

uint Random(uint x) { //hash function
    x = ((x >> 16) ^ x) * 0x45d9f3b;
    x = ((x >> 16) ^ x) * 0x45d9f3b; 
    x = (x >> 16) ^ x;
    return x;
 }
 float randFloat(float value) { //hash function
    float a = sin(value * 43758.5453);
    return a - floor(a);
 }
 
 float randomAngle(uint x) {
    uint hash = Random(x);                                                                                                                                                                                                                                                                                                                                          
    float normalized = hash;
    return normalized * 2.0 * float(3.14159265); 

 }
 
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) //test function to make sure hash function works as intended
{

    
   int pixel = id.x + id.y * width;
   uint randomNum = Random(pixel);
   float normalized = randomNum / float(0xFFFFFFFF);
   Result[id.xy] = float4(normalized, normalized, normalized, 1.0);
}
    


#pragma kernel MazeGen
RWTexture2D<float4> MazeTexture : register(u3);

[numthreads(8, 8, 1)]
void MazeGen(uint3 id : SV_DispatchThreadID) {
    float4 color = Result[id.xy];
    Result[id.xy] = color;


}


#pragma kernel spawnInCenter
struct Agent
{
    float2 pos;
    float angle;
};
float randFloat2(uint seed) {
    seed = (seed ^ 12345391u) * 2654435769u + (uint)(time * 100000);
    seed ^= (seed >> 16);
    seed *= 2654435769u;
    seed ^= (seed >> 16);
    seed *= 2654435769u;
    return (seed % 4294967295) / 4294967295.0f;
}


// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}
float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}
RWStructuredBuffer<Agent> AgentsOut : register(u0);

static const float2 center = float2(width / 2, height / 2);

uniform int randomValue;

[numthreads(16, 1, 1)]
void spawnInCenter (uint3 id : SV_DispatchThreadID) {
    Agent agent;

    uint seedX = hash(id.x + id.y * 2560 + randomValue); // Unique seed for x-coordinate
    uint seedY = hash(id.x + id.y * 1440 + randomValue + 1); 
    seedX = scaleToRange01(seedX) * 2230 + 100;
    seedY = scaleToRange01(seedY) * 1150 + 120;
    // Generate a random spawn angle for each agent
    float spawnAngle = (id.x / (float)numAgents) * 2.0 * 3.14159265;


    
    agent.angle = spawnAngle;
    agent.pos = float2(seedX, seedY);
    AgentsOut[id.x] = agent;
}


#pragma kernel updateAgent



void moveAgent(inout Agent agent, float deltaTime) {
    float PI = 3.141592;
    float newAngle = agent.angle;

    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    agent.pos += direction * deltaTime * 5;
    bool outOfBounds = false;

    int2 readPos = int2(agent.pos.x, agent.pos.y);
        float4 readColor = ReadTexture.Load(int3(readPos, 0));
        bool isNotYellow = !(readColor.r > 0.8f && readColor.g > 0.8f && readColor.b < 0.2f);
        if (!isNotYellow) {
            float randomValue = (agent.pos.x + agent.pos.y) % PI;
            uint angle = hash(agent.pos.x + agent.pos.y * 2560 + randomValues); // Unique seed for x-coordinate
            float great = scaleToRange01(angle) + agent.angle - PI/8;
    
            newAngle = angle;
            agent.angle = great;
        }

    if (agent.pos.x < 0) { agent.pos.x = 0; outOfBounds = true; }
    else if (agent.pos.x >= width) { agent.pos.x = width - 1; outOfBounds = true; }
    if (agent.pos.y < 0) { agent.pos.y = 0; outOfBounds = true; }
    else if (agent.pos.y >= height) { agent.pos.y = height - 1; outOfBounds = true; }

    if (outOfBounds && isNotYellow) {
        
        //agent.pos.x is used to generate a pseudo-random value for angle calculation
        float randomValue = (agent.pos.x + agent.pos.y) % PI;  
        if (agent.pos.x == 0) {
            // If agent hits the left boundary
            newAngle = randomValue - PI / 2.0;
           
        } else if (agent.pos.x >= width - 1) {
            // If agent hits the right boundary
            newAngle = randomValue + (PI / 2.0);
        }
    
        if (agent.pos.y == 0) {
            
            newAngle = randomValue;
        } else if (agent.pos.y >= height - 1) {
            
            newAngle = randomValue + PI;
        }
    
        agent.angle = newAngle;
    }
    
}
float sense(Agent agent, float quadrant) {
    float sensorAngle = agent.angle + quadrant; //+ offset if needed
    float2 sensorDirection = float2(cos(sensorAngle), sin(sensorAngle)); //makes line vector pointing in direction of  agent

	int2 sensorCenter = agent.pos + sensorDirection * 30; //smaller values means smaller circles

    float sum = 0;
    for (int horizontal = -1; horizontal <= 1; horizontal += 1) { //change  1 to whaetever to change size of sensor radius
        for (int vertical = -1; vertical <= 1; vertical += 1) {
           int2 position = sensorCenter + int2(horizontal, vertical);

           if (position.x >= 0 && position.x < width && position.y >= 0 && position.y <= height) {
            sum += TrailMap[position].x;
           }

        }
    }
    return sum;
}
[numthreads(256, 1, 1)]
void updateAgent(uint3 id : SV_DispatchThreadID) {
    Agent agent = AgentsOut[id.x];
    float2 sensePos = agent.pos;
    uint randomSteerStr = hash(sensePos.y * width + sensePos.x + hash(id.x + time * 100000));
    float randomSteerStrength = scaleToRange01(randomSteerStr) / 2;
    float turnSpeed = 100 * 2 * 3.1415;

    float sensorAngleRad = 45   * (3.1415 / 180); //change based on degrees wanted

    float Forward = sense(agent, 0);
    float Right = sense(agent, -sensorAngleRad);
    float Left = sense(agent, sensorAngleRad);

    if (Forward > Left && Forward > Right) {
		AgentsOut[id.x].angle += 0;
	}
    else if (Forward < Left && Forward < Right) {
        AgentsOut[id.x].angle += (randomSteerStrength - 0.5) * deltaTime; // * turnspeed * deltatime
    }
    else if (Right > Left) {
		AgentsOut[id.x].angle -= (randomSteerStrength) * deltaTime; //* turnSpeed * deltaTime;
	}
	// Turn left
	else if (Left > Right) {
		AgentsOut[id.x].angle += (randomSteerStrength) * deltaTime; // * turnSpeed * deltaTime;
	}
    
 
    agent = AgentsOut[id.x];
    moveAgent(agent, deltaTime);
    AgentsOut[id.x] = agent;
}

#pragma kernel DrawAgent

[numthreads(16,1,1)]
void DrawAgent (uint3 id : SV_DispatchThreadID)
{
  
    Agent agent = AgentsOut[id.x];
	// Draw to trail map
	int cellX = (int)agent.pos.x;
	int cellY = (int)agent.pos.y;

    float4 color = ReadTexture.Load(int3(cellX, cellY, 0));
    bool isYellow = color.r > 0.8f && color.g > 0.8f && color.b < 0.2f;
    if (!isYellow) {
	Result[int2(cellX, cellY)] = 1;
    }
}

#pragma kernel UpdateTrail

[numthreads(8, 8, 1)]
void UpdateTrail (uint3 id : SV_DispatchThreadID)
{
    float4 originalColor = TrailMap[id.xy];
    float dimFactor = 0.995;
    float epsilon = 0.01; // Adjust epsilon based on how strict comparison is to be
    bool isGrayscale = abs(originalColor.r - originalColor.g) < epsilon && 
                       abs(originalColor.g - originalColor.b) < epsilon;

    if(isGrayscale)
    {
        int2 readPos = int2(id.x, id.y);
        float4 readColor = ReadTexture.Load(int3(readPos, 0));
        bool isNotYellow = !(readColor.r > 0.8f && readColor.g > 0.8f && readColor.b < 0.2f);
        if (isNotYellow) {
        float4 dimmedColor = originalColor * dimFactor;
        TrailMap[id.xy] = dimmedColor;
        }
    }

}

#pragma kernel BlurTrail
RWTexture2D<float4> Blur : register(u1);

[numthreads(8, 8, 1)]
void BlurTrail (uint3 id : SV_DispatchThreadID)
{ 
    float4 originalColor = TrailMap[id.xy];

    float4 valsum = 0;

    for (int horizontal = -1; horizontal <= 1; horizontal++) {
        for (int vertical = -1; vertical <= 1; vertical++) {
            int temph = id.x + horizontal;
            int tempv = id.y + vertical;

            if (temph >= 0 && temph <= width && tempv >= 0 && tempv <= height) {
                valsum += TrailMap[int2(temph, tempv)];
            }


        }
    }

    float4 finalblur = valsum / 9;
    float4 blurred = originalColor + (finalblur - originalColor) * 0.1;
    float4 blurredValue = max(blurred, float4(0,0,0,0));

    int2 readPos = int2(id.x, id.y);
        float4 readColor = ReadTexture.Load(int3(readPos, 0));
        bool isNotYellow = !(readColor.r > 0.8f && readColor.g > 0.8f && readColor.b < 0.2f);
        if (isNotYellow) {
    Blur[id.xy] = blurredValue;   
        }
   
}